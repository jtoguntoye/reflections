What happens when you initialize a repository? why do you need to do it?
	When you initialize a repository you are making a new directory or an existing one to now include a .git
	file which will contain the metadata of the history of the files in that directory. Iniatializing a repository allows
	us to be able to track changes you'll be making to your project.

How is the staging area different from the working directory? what value do you think it offers?
	The staging area is like a mid-way point between the working directory and the repository. It allows us to commit a 
	bundle of files to the repository once as a single logical change, while each file in the bundle to be committed 
	have been added one at a time to the staging area from the working directory.

How can you use the staging area to make sure you have one commit per logical change?
	You can add all the files you want to commit to the staging area and then make them a single commit.
	
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	.when you want to make an experimemtal change to your code to see if an idea will work 
	.if you want to create another language version for your code or file
	Branches will help prevent you from crowding your master branch with too many commits that could cause you to become 
	confused with your code. Branches can be labeled with names and you can checkout on branches like you do regular commits
	on your 'master' branch and you can merge thw changes in a branch with your master branch when you are sure 
	you want the feature.
	
How do diagrams help you visualize the branch structure?
	Diagrams help me to know which commits are reachable in a project and how to return to them. Diagrams also make it easier 
	to trace the history of a project. Because of knowing the reachable commits it makes one more conscious of commits you dont 
	want to make to a branch yet and whether to write down the commit ID so as to return to them later if necessary.
	
what is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	The commits in a branch merged into the 'master' branch for example, will be added to the 'master' branch and will be included 
	in the 'master' branch's commit history. The merge of two branches is itself a new commit that will have both merged branches as its
	parent(i.e we can reach the commits in the two branches). A merge will include changes made to the project files by the two
	branches since the time the branches diverged.
	
What are the pros and cons of Git's automatically merging vs. always doing merges manually?
	merging automatically may have the advantage of the user not having to worry about resolving conflicts on his own. But if multiple
	authors work on the same file and make changes in the same general area especially in a code, Git will find it difficult to know which
	changes to keep and which ones to remove. Hence leaving the conflict to be resolved manually by an author allows him to have control
	over what changes he wants in his files.